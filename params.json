{"name":"Jstring","tagline":"A Node.js library, designed to simplify work with string validation and sanitization","body":"# jstring\r\n[![Build Status](https://travis-ci.org/imatveev/jstring.svg?branch=master)](https://travis-ci.org/imatveev/jstring)<br />\r\nA Node.js library, designed to simplify work with string validation and sanitization.\r\n## Installation\r\n    npm install jstring\r\n## When should I use jstring?\r\nYou need deal with string validation or sanitization in your Node.js project.\r\n## Installation\r\n    var jstring = require('jstring');\r\n    \r\n## Usage\r\n\r\n### handleString(string, task)\r\nMain sanitization method, that takes string and task object, and return string after processing. \r\n(All jstring methods have public access, and You can use them direct. This method is developed for convenience).\r\n#### string\r\nSource string.\r\n#### task\r\nA object, that contains necessary functions and their parameters.\r\n    {function: [param],\r\n     function: [param]}\r\nCan be used with:\r\n    removeTags;\r\n    cut;\r\n#### return\r\nString processed.\r\n#### Example\r\n    jstring.handleString('Foo <Bar>Buzz', { cut: 6, \r\n                                            removeTags:null, \r\n                                            replace: ['Fo', 'FO', true]\r\n                                          });\r\n    //return: FOo Bu\r\n    \r\n### removeTags(string[, except])\r\nRemoves all <*> and \\&lt;*\\&gt; elements of the string. \r\n#### string\r\nSource string.\r\n#### except\r\nA string, or array, that contains exclusion tag names. \r\n(Notice that closing tags is added automatically. For example if you pass 'div' as except - tag &lt;/div&gt; will not be deleted.)\r\n#### return\r\nString processed.\r\n#### Example\r\n    jstring.removeTags('Foo <Bar><Buzz>');\r\n    //return: Foo \r\n    jstring.removeTags('Foo <Bar><Buzz>', Bar);\r\n    //return: Foo <Bar>\r\n    jstring.removeTags('Foo &lt;Bar&gt;<Buzz>', Bar);\r\n    //return: Foo \r\n    \r\n### cut(string, length)\r\nCuts the string from start to **length**. \r\n#### string\r\nSource string.\r\n#### length\r\nThe length by which the source string will be cut including.\r\n#### return\r\nString processed.\r\n#### Example\r\n    jstring.cut('Foo <Bar><Buzz>', 9);\r\n    //return: Foo <Bar>\r\n\r\n### toLow(string)\r\nJust a wrapper over *toLowerCase* method, to allow use it in **handleString** method. \r\n#### string\r\nSource string.\r\n#### return\r\nString processed.\r\n#### Example\r\n    jstring.toLow('Foo Bar');\r\n    //return: foo bar\r\n\r\n### toUp(string)\r\nJust a wrapper over *toUpperCase* method, to allow use it in **handleString** method. \r\n#### string\r\nSource string.\r\n#### return\r\nString processed.\r\n#### Example\r\n    jstring.toUp('Foo Bar');\r\n    //return: FOO BAR\r\n\r\n### capitalize(string)\r\nMakes first character of the string capitalized. \r\n#### string\r\nSource string.\r\n#### return\r\nString processed.\r\n#### Example\r\n    jstring.capitalize('foo Bar');\r\n    //return: Foo Bar\r\n    \r\n### minifyWhitespace(string)\r\nRemoves extra whitespace. \r\n#### string\r\nSource string.\r\n#### return\r\nString processed.\r\n#### Example\r\n    jstring.minifyWhitespace('Foo   Bar  Buzz');\r\n    //return: Foo Bar Buzz\r\n\r\n### replace(string, [searchString, replaceString[, caseStrict]])\r\nReplaces substring in main string on new string.\r\n#### string\r\nSource string.\r\n#### searchString\r\nString, that need to be replaced with **replaceString**.\r\n#### replaceString\r\nString, that need to be placed instead **searchString**.\r\n#### caseStrict\r\nBoolean if replacement should be done strict by case sensitivity (true if case of searchString is matters).\r\n#### return\r\nString processed.\r\n#### Example\r\n    jstring.replace('Foo Bar foo', ['foo', 'buzz']);\r\n    //return: buzz Bar foo\r\n    jstring.replace('Foo Bar foo', ['foo', 'buzz', true]);\r\n    //return: Foo Bar buzz\r\n\r\n### replaceAll(string, [searchString, replaceString[, caseStrict]])\r\nReplaces all occurrences of substring in main string on new string.\r\n#### string\r\nSource string.\r\n#### searchString\r\nStrings, that need to be replaced with **replaceString**.\r\n#### replaceString\r\nString, that need to be placed instead **searchString**.\r\n#### caseStrict\r\nBoolean if replacement should be done strict by case sensitivity (true if case of searchString is matters).\r\n#### return\r\nString processed.\r\n#### Example\r\n    jstring.replace('Foo Bar foo', ['foo', 'buzz']);\r\n    //return: buzz Bar buzz\r\n    jstring.replace('Foo Bar foo', ['foo', 'buzz', true]);\r\n    //return: Foo Bar buzz\r\n    \r\n### forEach(string[, callback])\r\nIterate thru every char of incoming string and call the callback function to it.\r\n#### string\r\nSource string.\r\n#### callback(value, index)\r\nCallback function, that will be called to each char of **string**.\r\n##### value\r\nChar of **string**.\r\n##### index\r\nIndex of **value** in **string**.\r\n#### Example\r\n    jstring.forEach('FooBar', function(value, index){\r\n        console.log(value, index);\r\n    });\r\n    //outputs:\r\n    F 0\r\n    o 1\r\n    o 2\r\n    B 3\r\n    a 4\r\n    r 5\r\n    \r\n### isAlpha(string)\r\nChecks if the source string contains only letters. \r\n#### string\r\nSource string.\r\n#### return\r\nBoolean is the source string contains only letters.\r\n#### Example\r\n    jstring.isAlpha('Foo <Bar><Buzz>');\r\n    //return: false\r\n    jstring.isAlpha('Foo BarBuzz');\r\n    //return: true\r\n        \r\n### isAlphanumeric(string)\r\nChecks if the source string contains only letters and numbers.\r\n#### string\r\nSource string.\r\n#### return\r\nBoolean is the source string contains only letters and numbers.\r\n#### Example\r\n    jstring.isAlphanumeric('Foo <Bar><Buzz> 67');\r\n    //return: false\r\n    jstring.isAlphanumeric('Foo BarBuzz 67');\r\n    //return: true\r\n    \r\n### isEmail(string)\r\nChecks if the source string is a valid email.\r\n#### string\r\nSource string.\r\n#### return\r\nBoolean is the source string is a valid email.\r\n#### Example\r\n    jstring.isEmail('test@method.io');\r\n    //return: true\r\n    jstring.isEmail('Foo Bar');\r\n    //return: false\r\n\r\n### isUpper(string, strict)\r\nChecks if the source string is uppercase.\r\n#### string\r\nSource string.\r\n#### strict\r\nSet to true if test should be strict (return true only if all chars of string is uppercase).\r\n#### return\r\nBoolean is the source string is uppercase.\r\n#### Example\r\n    jstring.isUpper('Foo Bar');\r\n    //return: true\r\n    jstring.isUpper('foo bar');\r\n    //return: false\r\n    jstring.isUpper('Foo Bar', true);\r\n    //return: false\r\n    \r\n### isLower(string, strict)\r\nChecks if the source string is lowercase.\r\n#### string\r\nSource string.\r\n#### strict\r\nSet to true if test should be strict (return true only if all chars of string is lowercase).\r\n#### return\r\nBoolean is the source string is lowercase.\r\n#### Example\r\n    jstring.isLower('Foo Bar');\r\n    //return: true\r\n    jstring.isLower('FOO BAR');\r\n    //return: false\r\n    jstring.isLower('Foo Bar', true);\r\n    //return: false    ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}